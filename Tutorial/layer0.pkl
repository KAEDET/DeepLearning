ccopy_reg
_reconstructor
p1
(c__main__
LeNetConvPoolLayer
p2
c__builtin__
object
p3
NtRp4
(dp5
S'output'
p6
g1
(ctheano.tensor.var
TensorVariable
p7
g3
NtRp8
(dp9
S'auto_name'
p10
S'auto_522'
p11
sS'index'
p12
I0
sS'tag'
p13
(itheano.gof.utils
scratchpad
p14
(dp15
S'trace'
p16
(lp17
(S'D:\\Documents\\git\\DeepLearning\\Tutorial\\convolutional_mlp.py'
p18
I89
S'evaluate_lenet5'
p19
S'poolsize=(2, 2))'
tp20
a(S'D:\\Documents\\git\\DeepLearning\\Tutorial\\convolutional_mlp.py'
p21
I44
S'__init__'
p22
S"self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))"
tp23
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\gof\\op.py'
p24
I488
S'__call__'
p25
S'node = self.make_node(*inputs, **kwargs)'
tp26
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\tensor\\elemwise.py'
p27
I578
S'make_node'
p28
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp29
asbsS'name'
p30
NsS'owner'
p31
g1
(ctheano.gof.graph
Apply
p32
g3
NtRp33
(dp34
S'inputs'
p35
(lp36
g1
(g7
g3
NtRp37
(dp38
g10
S'auto_519'
p39
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p40
(dp41
g16
(lp42
(g21
I44
g22
S"self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))"
tp43
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\tensor\\var.py'
p44
I128
S'__add__'
p45
S'return theano.tensor.basic.add(self, other)'
tp46
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp47
a(g27
I578
g28
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp48
asbsg30
Nsg31
g1
(g32
g3
NtRp49
(dp50
g35
(lp51
g1
(g7
g3
NtRp52
(dp53
g10
S'auto_513'
p54
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p55
(dp56
bsg30
Nsg31
g1
(g32
g3
NtRp57
(dp58
g35
(lp59
g1
(g7
g3
NtRp60
(dp61
g10
S'auto_496'
p62
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p63
(dp64
g16
(lp65
(g21
I41
g22
S'ignore_border=True)'
tp66
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\tensor\\signal\\downsample.py'
p67
I55
S'max_pool_2d'
p68
S'output = op(input_4D)'
tp69
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp70
a(g67
I187
g28
S'return gof.Apply(self, [x], [x.type()])'
tp71
asbsg30
Nsg31
g1
(g32
g3
NtRp72
(dp73
g35
(lp74
g1
(g7
g3
NtRp75
(dp76
g10
S'auto_495'
p77
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p78
(dp79
bsg30
Nsg31
g1
(g32
g3
NtRp80
(dp81
g35
(lp82
g1
(g7
g3
NtRp83
(dp84
g10
S'auto_471'
p85
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p86
(dp87
bsg30
Nsg31
g1
(g32
g3
NtRp88
(dp89
g35
(lp90
g1
(g7
g3
NtRp91
(dp92
g10
S'auto_459'
p93
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p94
(dp95
bsg30
Nsg31
g1
(g32
g3
NtRp96
(dp97
g35
(lp98
g1
(g7
g3
NtRp99
(dp100
g10
S'auto_455'
p101
sg12
Nsg13
(itheano.gof.utils
scratchpad
p102
(dp103
g16
(lp104
(S'D:\\Documents\\git\\DeepLearning\\Tutorial\\convolutional_mlp.py'
p105
I224
S'<module>'
p106
S'evaluate_lenet5()'
tp107
a(g18
I69
g19
S"x = T.matrix('x')"
tp108
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\tensor\\basic.py'
p109
I844
S'matrix'
p110
S'return type(name)'
tp111
asbsg30
S'x'
sg31
NsS'type'
p112
g1
(ctheano.tensor.type
TensorType
p113
g3
NtRp114
(dp115
S'broadcastable'
p116
(I00
I00
tp117
sS'dtype'
p118
S'float32'
p119
sS'numpy_dtype'
p120
cnumpy
dtype
p121
(S'f4'
I0
I1
tRp122
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p123
I00
sg30
Nsbsbag1
(ctheano.tensor.var
TensorConstant
p124
g3
NtRp125
(dp126
g10
S'auto_458'
p127
sg12
Nsg13
(itheano.gof.utils
scratchpad
p128
(dp129
S'unique_value'
p130
Nsbsg30
Nsg112
g1
(g113
g3
NtRp131
(dp132
g116
(I00
tp133
sg118
S'int32'
p134
sg120
g121
(S'i4'
I0
I1
tRp135
(I3
S'<'
NNNI-1
I-1
I0
tbsg123
I00
sg30
NsbsS'data'
p136
cnumpy.core.multiarray
_reconstruct
p137
(cnumpy
ndarray
p138
(I0
tS'b'
tRp139
(I1
(I4
tg135
I00
S'\xf4\x01\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x1c\x00\x00\x00'
tbsbasg13
(itheano.gof.utils
scratchpad
p140
(dp141
g16
(lp142
(g105
I224
g106
S'evaluate_lenet5()'
tp143
a(g18
I77
g19
S'layer0_input = x.reshape((batch_size, 1, 28, 28))'
tp144
a(g44
I308
S'reshape'
p145
S'return theano.tensor.basic.reshape(self, shape, ndim=ndim)'
tp146
a(g109
I3945
g145
S'rval = op(x, newshape)'
tp147
asbsS'outputs'
p148
(lp149
g91
asS'op'
p150
g1
(ctheano.tensor.basic
Reshape
p151
g3
NtRp152
(dp153
S'ndim'
p154
I4
sS'_op_use_c_code'
p155
S'C:\\MinGW\\bin\\g++.exe'
p156
sg30
Nsbsbsg112
g1
(g113
g3
NtRp157
(dp158
g116
(I00
I01
I00
I00
tp159
sg118
g119
sg120
g122
sg123
I00
sg30
Nsbsbag1
(g7
g3
NtRp160
(dp161
g10
S'auto_470'
p162
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p163
(dp164
g16
(lp165
(g109
I145
S'as_tensor_variable'
p166
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp167
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\sandbox\\cuda\\var.py'
p168
I30
S'_as_TensorVariable'
p169
S'return HostFromGpu()(self)'
tp170
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp171
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\sandbox\\cuda\\basic_ops.py'
p172
I74
g28
S'broadcastable=x.broadcastable)()])'
tp173
asbsg30
Nsg31
g1
(g32
g3
NtRp174
(dp175
g35
(lp176
g1
(ctheano.sandbox.cuda.var
CudaNdarraySharedVariable
p177
g3
NtRp178
(dp179
g12
NsS'container'
p180
g1
(ctheano.gof.link
Container
p181
g3
NtRp182
(dp183
g30
NsS'storage'
p184
(lp185
ctheano.sandbox.cuda.type
CudaNdarray_unpickler
p186
(g137
(g138
(I0
tS'b'
tRp187
(I1
(I20
I1
I5
I5
tg122
I00
S'\xab\xf9\xb8=\x8a\xa8\xb2\xbe\x97\x0eK\xbd\xb6\x9c\xa3\xbb\x17K\x15\xbcR\x1f\x93=\xc2\xec\x85\xbep}F\xbe\x059b>\xae\x0e\x18\xbe}.\x0f\xbe\x93\xa1\x9a\xbe1._\xbcq\xa4T\xbd\x02\xfaw>\x9by9\xbdK\x18\xe2\xbe00.>\x16\xfc\x91=\xee\x1f\xa2=\x9aH\x92\xbe\xf1\x9c\x8e\xbe\x96\xcd\xf9<R&O>\xb5>4>\x0b\xb2\x1f\xbe\t\\?\xbe8\xe4\x1e>\xcf\x02f\xbd\xc9\xf9\xb2=\xd1\xae\xa0=\xac|w>\xaa\xca\x05>w?\t?\xea\xc8\xc2=\xdf\\\xee\xbc\xc5X\xc3=\x83\xe0\xef> \xae\xc6>G\xe7z>\xfa\xdd\xdd\xbd\x1c\'\x93\xbe\xf9\xa9\xb9=6\xdb\xc8\xbb\xb3\xebo>\x90\xcc\xab\xbe\xcb\x87\xc2\xbe\x03o]\xbe\x93\x12\xb4\xbc!\x0eT=\x89!&\xbe;\x96\x98\xbe\x92\xb6\xa5\xbe\x16\xcdr\xbc\xc8B\x13\xbe\xe7\x0f\xc4:\x1fEq\xbe\xf7\x91\xb1\xbe\\gB\xbe\x07\xe4r\xbe\x91Y\xa7=\x13*\xd3;\x02\x80\xb9\xbe\xf0\x13\xd8\xbe\xa8f5\xbeN\x16\xae>bX2>\xd3\xd0\x88=v-\x8e\xbe\xe5\x13\x93\xbeR\xb0Q>0%\xb1>1\xe9\xd8<s>\xcf\xbd\xf0\x1d\x93\xbd\x7f\x06p\xbd\xc2\x1e\x15>\xb6\x99\x95<b\x19\xc7<\x13U\xf0<\xd2>D>\x8b\x91\xce>\xf3,x>\xeb\x9c]>|\x00L>\x15h\xfe\xbd\t9p>N\xc1X>\x83\xfc\x01\xbdk(\x90>\x16 M>\x85<\xf4\xbd\x94X\xa3\xbd\xffg\x9f\xbd\xa2\x04\xdc\xbdU\x96o>9\xfb\x0f\xbe>\xdc\x0b;:|\x96\xbeb\xc1T\xbe)\xe2\xf8>\xda#\xcb>\x1a\xeaE\xbc!e\x88\xbd\x95\xfc\x0e>\x81\x99]\xbd&L\x97\xbe:\xd3\x8e\xbe\xa36J\xbd\xe4\x91\x0f\xbb\xf6\xdce\xbe^b\xda\xbe\x05\xd2S\xbe\xae\xf9\x8e\xbe\xfc2\xae\xbe\x8d\xe6\x9c\xbethZ\xbe\x9d\xd3\x81\xbe\x0f\x15\xe6\xbd@\xc4\x08\xbe\x05a\xeb\xbd#\xae}\xbd+\x96\x92\xbc\x0eA\x92>y\x1ek\xbdX\xbb\x02\xbe\xcd\x8f>\xbeR\\\x1f\xbdP\xb8 \xbeY\x82_>\x889M\xbe\xdf\xdb\x87\xbebo\x86\xbe\xdfr\xbb\xbe[9?>\x98\x96\x81;5\x83\xc3\xbe\xeej\xba\xbeG\x9eo\xbeA>\x88>\xfa\xcd\x9e\xbe\x8b\x8a\xd5\xbd\x13~\xa6\xbe\x0e\x10\x8d=\xbe\xec\x8d>|7\xfd\xbd\xba\x1e\x86\xbe^\xcd\x9f=l\xdbQ>2\x18\xdf>\xbb\xdf\xd6=Gv\xa0\xbd\x13?\xe9=\xed\x00S>\xa3\xa47>\x05\xac\x89\xbdXk\x8b>\x97\x1da>\x8d\x97\xac>!\xe4\x95=<o\xb0\xbdn \xb5>\x1au9\xbb\xa5)\xed=\x87~^>\xbdZ"\xbd\xdf\xa9\xa2>1\x96\xac\xbdV\xe1]>\x0e\x80\x05>\x17\x7f\x9d=I\x88\x1f>\xa4\xad\x0e>\xd1\xf1\xd9\xbdl,7\xbe2`\xda<\xf4\x9d\x9a\xbe\x19\x81$\xbex\x83\xd0\xbd\xac\xa4\x03=\r\x00\x89=i\x95]>\x9b}\x89=T\x02Z\xbd\xe6\xdb}>>\xaaS>o\'\xce>$8\x9f>\x89\x93\xbf>w\xec)>\x84\xebb\xbd\x0b\x14\xc0>\xbc<\xa0>\xc7\xe6\xdb>\xd8L\xad>\xc9ed>A\x1bj<\x86G\x84>)\x84\x9a<~\x12h>\xbb\xbb\xa7\xbb\xb9ai\xbe\x9d0\x93=,8~>\xf0\x179\xbe\xf4\xc2\xf9=\xca|\xbb=\xa5D\x11>\x8d\xad\xaf>^\xa82>\x97qx>\x9d\xc8\xe1>\xf0\xe4@>\xabl\xd2>\xe8&\xef=\x87\x069>\x97o\x07>8\xcd\xee>\x0eC9=)\tp=\x16\x98\xb1=XKG>\xd8v ><\x91\xfd=1G\xa7\xbd\xfb\xfa2\xbe\x03\xad==r\x9f:\xbe\xe7\xe2(=VP\\\xbe\xfe)~\xbe`i\x9d\xbe(\xaa\x12=\xe21\xe3=\x1cr\xef\xbd\x8c\x9d\x9f>\xd6f\xce=;\xb8\xad\xbc\x81\xa8>>\x9a]I>\x13\xb6y>h\xcc\xb8>\x90\xed;=\xfc\x92f\xbc\xbc\xc4h>n\x0f\x9c\xbe\xde\xd0\xa6\xbdf\xcby\xbe$g\xd7;h\xfeE>\xe5c\x8b=\x93\xc5\xfb\xbe\xe8\x1a\xa7\xbe\x0cGW>A\xc9P>\xb9I\x02\xbe&T\xc0\xbe\xaeCc\xbc\xba\xce\x07>\x1fd\x1b>\x84\x08\x0f>\xd4\x99k\xbes3 \xbc\x91&\xb6<\xf3\x18\x82\xbe*H\xaa>\xed26>@\xda,>n,\x00\xbfW\xff\x0b\xbf\x94\xd7b>wt0>\xca\x1dJ\xbe:\x95\xb3\xbem5\x83\xbd\x8d\xae=>\xa22Y\xbc\x01\xca\xa8=uW\xb7\xbd~O\x0e>Z<.;9\x88\x9b\xba\x134\xab>W\x1c\xb7>\xed\xa3\x95>\x9e\xcbK>\x86(\x88\xbd\xfe\x8e\xbe=\x93%\xff=t\x87\xd6>2\x8b\x15\xbd/\x92\x99=\xf5\x01\xa7\xbe>\x9cq\xbdx\x97\x1d>\xc4\x00Z\xbe/\xef\xbb\xbe `;\xbe\x82\xc7\xd9\xbeD\xb7\xbf\xbeP]\xba\xbe\x0c\xcc\xc5\xbeG\xa5E\xbd\xfb\xee\xa7\xbe~$\x95\xbe\xec\xa66\xbee\xb8q\xbe~\xcd\xea=>\x96\x0c>\xddGV>\x02\x19\x90\xbd\x8dj\\>h\xa2/\xbc\x9e\x1c\xb6\xbd\xb1\x1c*>\xad\xc9\xea=\r\x1eh>\x02aa>u\xf0\xd0\xbdY\xe7\xbb=:\xf7\x96>*a\x8d>yu\n>g+\x91<\x07?N>I\x96\xba>h\xe4\x12=\xa9;\x01>\x95V\x8b\xbe)%\x8e\xbe\x99\xc42\xbe^\x9c\x9d\xbe\xfe\xe2\xea\xbe\xb3\xf9\xdd\xbe\xc2\x18\t\xbf\xe0{\xc3\xbe0\xd6\x88\xbe\x00O\x07\xbf7\x1e\xdd\xbe\x00E)\xbeW\xcf\x8a\xbe=A\x1a\xbe5\t\xa1=\xe2m\x9a>\x19\x1b\x03>\xbbot>\xbf\xe0\xa2>|\xe1\xfc>C\x93\xa0>N\xe9\xba>\x8f\x90\xfe=\x19\xbcW\xbd\xa1\r\x98\xbe@\x9c\xb2\xbe}sp\xbei\x11\x87>M\x1f\xa4>t\x7f\x07?+\xb2\xfc>D!\xc1>\xadb\xe1=-\xf2\xa9<<\xae->\xdb\xa4\\>\x90\xb4A\xbec\xc8\xf5\xbd\xcf>\x01\xbe\xa3c\xd2\xbe\xd5J\x9c\xbe\xe9d!\xbe\xe3\x93\xbc\xbe|\xf2"\xbev1\x81\xbd\x98\xd6)\xbeIh\xed<\x9a\xd7>\xbeX\xbd\x18>\x9e\xbe\x0f<\xffF%\xbd\xd3\xfe0\xbe\x98$6=\xf8Qq<\xdf\x07r>\x82\xd0_\xbd\xedp\xd5\xbd\xa3\xa3\x99=D\x1f\x8f>\xab\xf1e>"$X=\xfe\x1d\xe8\xbd.]\xe0>c0\x92>\xb5\xffJ\xbd\x10\xb5u<\x19^R\xbe\xa6j\x95>z\x97\x9b=\xc3\x11\x96\xbc\x87\x18\n>\x89\xb9x>\xc9V.\xbdG}x>\xb3\xfeP\xbev\xa9\xba\xbeH\x9c\xff="\x9e\xbc\xbd\xdb?n=>\xb1\xbb\xbe\xa8\xe3"\xbeVB\x90>J\x19.\xbd\x1a\xe5\xa1\xbeM\x99\x96\xbd}fL==:\x8d>c\xc1x\xbe\x0b\x14{\xbe\t\x1a\x93>O/\x06>\xcd\xac\xa4=\xc1\xfc\x8f\xbe\xd8\x8b\x8a>\x99j\x91>\xe4\xcb\xbb\xbdo\x87\x04\xbc\xdb\xb9\x90>\x188\xa3>\x9e@\xb7\xbd/\x80\xcf\xbd\x8b\x93\xb7<\x87\x06\xf8>~\xd76>.(\x1e\xbe\xf9\x1c\xc9\xbe\xc7\x9d\x8e\xbe\xe0o}>\xaaT\xd1=u\xb8\x84\xbe\x07\\\x93\xbe\xaaau\xbdN,+>\xff\x82\xcd\xbdM\x9d\x92\xbe"\xa2\x9e\xbe\'B\x86\xbd dL>.\x11\x9c\xbc,^V\xbe\xde\x13m\xbe\x1da\x90;\xee\x10\x0f\xbc\x9a;\xa9\xbd\x8c\xab\x07>y\xd3D=\x07\x92\x82>\xe5}\x1c>?{\xf3=\xa7 \x8f>\xb4D\x13=\xd0X\x03\xbe\x03\xb8\x8d>o\x1c\x9e>\xca\x8c\xd9=O\xdb\xdf\xbd\x00>\xc6\xbe\xaa\xc6\xb3>\xdc\xbb\xac>\x08\x049\xbe\x82\x84\x90\xbe&\xbf\xc9\xbe\x9d\xac\xb2>85\x9b\xbc\xbcv\n\xbe\xc4\xcf\xca\xbe\x93\x95\xab\xbe\x92\xe5?\xbe\xd8\xfa\x81\xbeDJ=\xbeJ\xfa\xf2=K\xe0\xa2>\x9dQ\xf8\xbeL1\x9a\xbe\xe4\xb5s\xbeA\x19\xdc\xbe\xc7\\\x03\xbe\xce\xe9\xb4=\x1a\x07\xa1\xbe\xb3\x82k\xbe\xab\x1e\xc5\xbeQ\x9c\xc1\xbe\x8c\xc0(>#\xa16:\x1b\x94\xa8=\x80L!\xbeP\xd5\xa9\xbe\xd1\xef\x95>\xc6+\x88>*H\x9a>\x8eZL=\xe82\x90;'
tbtRp188
asS'strict'
p189
I00
sS'readonly'
p190
I00
sg112
g1
(ctheano.sandbox.cuda.type
CudaNdarrayType
p191
g3
NtRp192
(dp193
g116
(I00
I00
I00
I00
tp194
sg30
NsbsS'allow_downcast'
p195
Nsbsg30
Nsg10
S'auto_460'
p196
sg13
(itheano.gof.utils
scratchpad
p197
(dp198
g16
(lp199
(g105
I224
g106
S'evaluate_lenet5()'
tp200
a(g18
I89
g19
S'poolsize=(2, 2))'
tp201
a(g21
I25
g22
S'borrow=True)'
tp202
asbsS'get_value_return_ndarray'
p203
I01
sg31
Nsg112
g192
sbasg13
(itheano.gof.utils
scratchpad
p204
(dp205
g16
(lp206
(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp207
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\tensor\\nnet\\conv.py'
p208
I615
g28
S'_kerns = as_tensor_variable(kerns)'
tp209
a(g109
I145
g166
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp210
a(g168
I30
g169
S'return HostFromGpu()(self)'
tp211
asbsg148
(lp212
g160
asg150
g1
(ctheano.sandbox.cuda.basic_ops
HostFromGpu
p213
g3
NtRp214
(dp215
g155
g156
sbsbsg112
g1
(g113
g3
NtRp216
(dp217
g116
(I00
I00
I00
I00
tp218
sg118
S'float32'
p219
sg120
g122
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p220
(dp221
g16
(lp222
(g105
I224
g106
S'evaluate_lenet5()'
tp223
a(g18
I89
g19
S'poolsize=(2, 2))'
tp224
a(g21
I35
g22
S'image_shape=image_shape)'
tp225
a(g208
I149
S'conv2d'
p226
S'return op(input, filters)'
tp227
asbsg148
(lp228
g83
asg150
g1
(ctheano.tensor.nnet.conv
ConvOp
p229
g3
NtRp230
(dp231
S'kshp_logical'
p232
(I5
I5
tp233
sS'_ConvOp__hashval'
p234
I-862097876
sS'imshp'
p235
(I1
I28
I28
tp236
sS'verbose'
p237
I0
sS'bsize'
p238
I500
sS'nkern'
p239
I20
sS'imshp_logical'
p240
g236
sg155
g156
sS'outshp'
p241
(I24
I24
tp242
sS'direction_hint'
p243
S'forward'
p244
sS'fft_opt'
p245
I01
sS'version'
p246
I-1
sS'kshp'
p247
g233
sS'unroll_kern'
p248
I2
sS'fulloutshp'
p249
(I24
I24
tp250
sS'dx'
p251
I1
sS'dy'
p252
I1
sS'openmp'
p253
I00
sS'kshp_logical_top_aligned'
p254
I01
sS'out_mode'
p255
S'valid'
p256
sS'unroll_patch'
p257
I00
sS'unroll_batch'
p258
I5
sbsbsg112
g1
(g113
g3
NtRp259
(dp260
g116
(I00
I00
I00
I00
tp261
sg118
g119
sg120
g122
sg123
I00
sg30
Nsbsbag1
(g7
g3
NtRp262
(dp263
g10
S'auto_482'
p264
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p265
(dp266
bsg30
Nsg31
g1
(g32
g3
NtRp267
(dp268
g35
(lp269
g1
(g124
g3
NtRp270
(dp271
g10
S'auto_481'
p272
sg12
Nsg13
(itheano.gof.utils
scratchpad
p273
(dp274
g130
Nsbsg30
NsS'cached'
p275
I01
sg112
g1
(g113
g3
NtRp276
(dp277
g116
(tsg118
S'int8'
p278
sg120
g121
(S'i1'
I0
I1
tRp279
(I3
S'|'
NNNI-1
I-1
I0
tbsg123
I00
sg30
Nsbsg136
g137
(g138
(I0
tS'b'
tRp280
(I1
(tg279
I00
S'\x00'
tbsbag1
(g7
g3
NtRp281
(dp282
g10
S'auto_479'
p283
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p284
(dp285
bsg30
Nsg31
g1
(g32
g3
NtRp286
(dp287
g35
(lp288
g1
(g7
g3
NtRp289
(dp290
g10
S'auto_478'
p291
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p292
(dp293
g16
(lp294
(g109
I2652
S'prod'
p295
S'no_zeros_in_input=no_zeros_in_input)(input)'
tp296
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp297
a(g27
I1833
g28
S'return CAReduce.make_node(op, input)'
tp298
a(g27
I1335
g28
S'broadcastable=broadcastable)()'
tp299
asbsg30
Nsg31
g1
(g32
g3
NtRp300
(dp301
g35
(lp302
g1
(g7
g3
NtRp303
(dp304
g10
S'auto_477'
p305
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p306
(dp307
bsg30
Nsg31
g1
(g32
g3
NtRp308
(dp309
g35
(lp310
g1
(g7
g3
NtRp311
(dp312
g10
S'auto_475'
p313
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p314
(dp315
g16
(lp316
(g67
I44
g68
S'batch_size = tensor.prod(input.shape[:-2])'
tp317
a(g44
I266
S'<lambda>'
p318
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp319
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp320
a(S'C:\\Python27\\lib\\site-packages\\theano-0.6.0-py2.7.egg\\theano\\compile\\ops.py'
p321
I238
g28
S'return gof.Apply(self, [x], [theano.tensor.lvector()])'
tp322
asbsg30
Nsg31
g1
(g32
g3
NtRp323
(dp324
g35
(lp325
g83
asg13
(itheano.gof.utils
scratchpad
p326
(dp327
g16
(lp328
(g18
I89
g19
S'poolsize=(2, 2))'
tp329
a(g21
I41
g22
S'ignore_border=True)'
tp330
a(g67
I44
g68
S'batch_size = tensor.prod(input.shape[:-2])'
tp331
a(g44
I266
g318
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp332
asbsg148
(lp333
g311
asg150
g1
(ctheano.compile.ops
Shape
p334
g3
NtRp335
(dp336
g155
g156
sbsbsg112
g1
(g113
g3
NtRp337
(dp338
g116
(I00
tp339
sg118
S'int64'
p340
sg120
g121
(S'i8'
I0
I1
tRp341
(I3
S'<'
NNNI-1
I-1
I0
tbsg123
I00
sg30
Nsbsbag1
(ctheano.scalar.basic
ScalarConstant
p342
g3
NtRp343
(dp344
g10
S'auto_476'
p345
sg12
Nsg13
(itheano.gof.utils
scratchpad
p346
(dp347
bsg30
Nsg112
g1
(ctheano.scalar.basic
Scalar
p348
g3
NtRp349
(dp350
g118
g340
sbsg136
cnumpy.core.multiarray
scalar
p351
(g341
S'\xfe\xff\xff\xff\xff\xff\xff\xff'
tRp352
sbasg13
(itheano.gof.utils
scratchpad
p353
(dp354
g16
(lp355
(g18
I89
g19
S'poolsize=(2, 2))'
tp356
a(g21
I41
g22
S'ignore_border=True)'
tp357
a(g67
I44
g68
S'batch_size = tensor.prod(input.shape[:-2])'
tp358
a(g44
I423
S'__getitem__'
p359
S'lambda entry: isinstance(entry, Variable)))'
tp360
asbsg148
(lp361
g303
asg150
g1
(ctheano.tensor.subtensor
Subtensor
p362
g3
NtRp363
(dp364
S'idx_list'
p365
(c__builtin__
slice
p366
(Ng349
NtRp367
tp368
sg155
g156
sbsbsg112
g1
(g113
g3
NtRp369
(dp370
g116
(I00
tp371
sg118
g340
sg120
g341
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p372
(dp373
g16
(lp374
(g18
I89
g19
S'poolsize=(2, 2))'
tp375
a(g21
I41
g22
S'ignore_border=True)'
tp376
a(g67
I44
g68
S'batch_size = tensor.prod(input.shape[:-2])'
tp377
a(g109
I2652
g295
S'no_zeros_in_input=no_zeros_in_input)(input)'
tp378
asbsg148
(lp379
g289
asg150
g1
(ctheano.tensor.elemwise
Prod
p380
g3
NtRp381
(dp382
S'no_zeros_in_input'
p383
I00
sS'acc_dtype'
p384
g340
sg118
g340
sg155
g156
sS'scalar_op'
p385
g1
(ctheano.scalar.basic
Mul
p386
g3
NtRp387
(dp388
S'output_types_preference'
p389
ctheano.scalar.basic
upcast_out
p390
sg155
g156
sg30
S'mul'
p391
sbsS'axis'
p392
Nsbsbsg112
g1
(g113
g3
NtRp393
(dp394
g116
(tsg118
g340
sg120
g341
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p395
(dp396
g16
(lp397
(g18
I89
g19
S'poolsize=(2, 2))'
tp398
a(g21
I41
g22
S'ignore_border=True)'
tp399
a(g67
I45
g68
S'batch_size = tensor.shape_padright(batch_size, 1)'
tp400
a(g109
I3621
S'shape_padright'
p401
S'return DimShuffle(_t.broadcastable, pattern)(_t)'
tp402
asbsg148
(lp403
g281
asg150
g1
(ctheano.tensor.elemwise
DimShuffle
p404
g3
NtRp405
(dp406
S'drop'
p407
(lp408
sS'shuffle'
p409
(lp410
sS'augment'
p411
(lp412
I0
asS'input_broadcastable'
p413
(tsS'inplace'
p414
I00
sS'new_order'
p415
(S'x'
tp416
sg155
g156
sbsbsg112
g1
(g113
g3
NtRp417
(dp418
g116
(I01
tp419
sg118
g340
sg120
g341
sg123
I00
sg30
Nsbsbag1
(g124
g3
NtRp420
(dp421
g10
S'auto_480'
p422
sg12
Nsg13
(itheano.gof.utils
scratchpad
p423
(dp424
g130
g351
(g135
S'\x01\x00\x00\x00'
tRp425
sbsg30
Nsg275
I01
sg112
g1
(g113
g3
NtRp426
(dp427
g116
(I01
tp428
sg118
S'int32'
p429
sg120
g135
sg123
I00
sg30
Nsbsg136
g137
(g138
(I0
tS'b'
tRp430
(I1
(I1
tg135
I00
S'\x01\x00\x00\x00'
tbsbag1
(g7
g3
NtRp431
(dp432
g10
S'auto_474'
p433
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p434
(dp435
bsg30
Nsg31
g1
(g32
g3
NtRp436
(dp437
g35
(lp438
g1
(g7
g3
NtRp439
(dp440
g10
S'auto_472'
p441
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p442
(dp443
g16
(lp444
(g67
I41
g68
S'img_shape = input.shape[-2:]'
tp445
a(g44
I266
g318
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp446
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp447
a(g321
I238
g28
S'return gof.Apply(self, [x], [theano.tensor.lvector()])'
tp448
asbsg30
Nsg31
g1
(g32
g3
NtRp449
(dp450
g35
(lp451
g83
asg13
(itheano.gof.utils
scratchpad
p452
(dp453
g16
(lp454
(g18
I89
g19
S'poolsize=(2, 2))'
tp455
a(g21
I41
g22
S'ignore_border=True)'
tp456
a(g67
I41
g68
S'img_shape = input.shape[-2:]'
tp457
a(g44
I266
g318
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp458
asbsg148
(lp459
g439
asg150
g335
sbsg112
g337
sbag1
(g342
g3
NtRp460
(dp461
g10
S'auto_473'
p462
sg12
Nsg13
(itheano.gof.utils
scratchpad
p463
(dp464
bsg30
Nsg112
g349
sg136
g351
(g341
S'\xfe\xff\xff\xff\xff\xff\xff\xff'
tRp465
sbasg13
(itheano.gof.utils
scratchpad
p466
(dp467
g16
(lp468
(g18
I89
g19
S'poolsize=(2, 2))'
tp469
a(g21
I41
g22
S'ignore_border=True)'
tp470
a(g67
I41
g68
S'img_shape = input.shape[-2:]'
tp471
a(g44
I423
g359
S'lambda entry: isinstance(entry, Variable)))'
tp472
asbsg148
(lp473
g431
asg150
g1
(g362
g3
NtRp474
(dp475
g365
(g366
(g349
NNtRp476
tp477
sg155
g156
sbsbsg112
g1
(g113
g3
NtRp478
(dp479
g116
(I00
tp480
sg118
g340
sg120
g341
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p481
(dp482
g16
(lp483
(g105
I224
g106
S'evaluate_lenet5()'
tp484
a(g18
I89
g19
S'poolsize=(2, 2))'
tp485
a(g21
I41
g22
S'ignore_border=True)'
tp486
a(g67
I50
g68
S"img_shape), 'int64')"
tp487
asbsg148
(lp488
g262
asg150
g1
(ctheano.tensor.basic
Join
p489
g3
NtRp490
(dp491
g155
g156
sbsbsg112
g1
(g113
g3
NtRp492
(dp493
g116
(I00
tp494
sg118
S'int64'
p495
sg120
g341
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p496
(dp497
g16
(lp498
(g18
I89
g19
S'poolsize=(2, 2))'
tp499
a(g21
I41
g22
S'ignore_border=True)'
tp500
a(g67
I51
g68
S'input_4D = tensor.reshape(input, new_shape, ndim=4)'
tp501
a(g109
I3945
g145
S'rval = op(x, newshape)'
tp502
asbsg148
(lp503
g75
asg150
g1
(g151
g3
NtRp504
(dp505
g154
I4
sg155
g156
sg30
Nsbsbsg112
g1
(g113
g3
NtRp506
(dp507
g116
(I00
I01
I00
I00
tp508
sg118
g119
sg120
g122
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p509
(dp510
g16
(lp511
(g105
I224
g106
S'evaluate_lenet5()'
tp512
a(g18
I89
g19
S'poolsize=(2, 2))'
tp513
a(g21
I41
g22
S'ignore_border=True)'
tp514
a(g67
I55
g68
S'output = op(input_4D)'
tp515
asbsg148
(lp516
g60
asg150
g1
(ctheano.tensor.signal.downsample
DownsampleFactorMax
p517
g3
NtRp518
(dp519
g155
g156
sS'ds'
p520
(I2
I2
tp521
sS'ignore_border'
p522
I01
sS'st'
p523
g521
sbsbsg112
g506
sbag1
(g7
g3
NtRp524
(dp525
g10
S'auto_504'
p526
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p527
(dp528
bsg30
Nsg31
g1
(g32
g3
NtRp529
(dp530
g35
(lp531
g270
ag1
(g7
g3
NtRp532
(dp533
g10
S'auto_499'
p534
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p535
(dp536
bsg30
Nsg31
g1
(g32
g3
NtRp537
(dp538
g35
(lp539
g1
(g7
g3
NtRp540
(dp541
g10
S'auto_497'
p542
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p543
(dp544
g16
(lp545
(g67
I58
g68
S'outshp = tensor.join(0, input.shape[:-2], output.shape[-2:])'
tp546
a(g44
I266
g318
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp547
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp548
a(g321
I238
g28
S'return gof.Apply(self, [x], [theano.tensor.lvector()])'
tp549
asbsg30
Nsg31
g1
(g32
g3
NtRp550
(dp551
g35
(lp552
g83
asg13
(itheano.gof.utils
scratchpad
p553
(dp554
g16
(lp555
(g18
I89
g19
S'poolsize=(2, 2))'
tp556
a(g21
I41
g22
S'ignore_border=True)'
tp557
a(g67
I58
g68
S'outshp = tensor.join(0, input.shape[:-2], output.shape[-2:])'
tp558
a(g44
I266
g318
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp559
asbsg148
(lp560
g540
asg150
g335
sbsg112
g337
sbag1
(g342
g3
NtRp561
(dp562
g10
S'auto_498'
p563
sg12
Nsg13
(itheano.gof.utils
scratchpad
p564
(dp565
bsg30
Nsg112
g349
sg136
g351
(g341
S'\xfe\xff\xff\xff\xff\xff\xff\xff'
tRp566
sbasg13
(itheano.gof.utils
scratchpad
p567
(dp568
g16
(lp569
(g18
I89
g19
S'poolsize=(2, 2))'
tp570
a(g21
I41
g22
S'ignore_border=True)'
tp571
a(g67
I58
g68
S'outshp = tensor.join(0, input.shape[:-2], output.shape[-2:])'
tp572
a(g44
I423
g359
S'lambda entry: isinstance(entry, Variable)))'
tp573
asbsg148
(lp574
g532
asg150
g1
(g362
g3
NtRp575
(dp576
g365
(g366
(Ng349
NtRp577
tp578
sg155
g156
sbsbsg112
g1
(g113
g3
NtRp579
(dp580
g116
(I00
tp581
sg118
g340
sg120
g341
sg123
I00
sg30
Nsbsbag1
(g7
g3
NtRp582
(dp583
g10
S'auto_502'
p584
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p585
(dp586
bsg30
Nsg31
g1
(g32
g3
NtRp587
(dp588
g35
(lp589
g1
(g7
g3
NtRp590
(dp591
g10
S'auto_500'
p592
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p593
(dp594
g16
(lp595
(g67
I58
g68
S'outshp = tensor.join(0, input.shape[:-2], output.shape[-2:])'
tp596
a(g44
I266
g318
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp597
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp598
a(g321
I238
g28
S'return gof.Apply(self, [x], [theano.tensor.lvector()])'
tp599
asbsg30
Nsg31
g1
(g32
g3
NtRp600
(dp601
g35
(lp602
g60
asg13
(itheano.gof.utils
scratchpad
p603
(dp604
g16
(lp605
(g18
I89
g19
S'poolsize=(2, 2))'
tp606
a(g21
I41
g22
S'ignore_border=True)'
tp607
a(g67
I58
g68
S'outshp = tensor.join(0, input.shape[:-2], output.shape[-2:])'
tp608
a(g44
I266
g318
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp609
asbsg148
(lp610
g590
asg150
g335
sbsg112
g337
sbag1
(g342
g3
NtRp611
(dp612
g10
S'auto_501'
p613
sg12
Nsg13
(itheano.gof.utils
scratchpad
p614
(dp615
bsg30
Nsg112
g349
sg136
g351
(g341
S'\xfe\xff\xff\xff\xff\xff\xff\xff'
tRp616
sbasg13
(itheano.gof.utils
scratchpad
p617
(dp618
g16
(lp619
(g18
I89
g19
S'poolsize=(2, 2))'
tp620
a(g21
I41
g22
S'ignore_border=True)'
tp621
a(g67
I58
g68
S'outshp = tensor.join(0, input.shape[:-2], output.shape[-2:])'
tp622
a(g44
I423
g359
S'lambda entry: isinstance(entry, Variable)))'
tp623
asbsg148
(lp624
g582
asg150
g1
(g362
g3
NtRp625
(dp626
g365
(g366
(g349
NNtRp627
tp628
sg155
g156
sbsbsg112
g1
(g113
g3
NtRp629
(dp630
g116
(I00
tp631
sg118
g340
sg120
g341
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p632
(dp633
g16
(lp634
(g105
I224
g106
S'evaluate_lenet5()'
tp635
a(g18
I89
g19
S'poolsize=(2, 2))'
tp636
a(g21
I41
g22
S'ignore_border=True)'
tp637
a(g67
I58
g68
S'outshp = tensor.join(0, input.shape[:-2], output.shape[-2:])'
tp638
asbsg148
(lp639
g524
asg150
g490
sbsg112
g1
(g113
g3
NtRp640
(dp641
g116
(I00
tp642
sg118
S'int64'
p643
sg120
g341
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p644
(dp645
g16
(lp646
(g18
I89
g19
S'poolsize=(2, 2))'
tp647
a(g21
I41
g22
S'ignore_border=True)'
tp648
a(g67
I59
g68
S'return tensor.reshape(output, outshp, ndim=input.ndim)'
tp649
a(g109
I3945
g145
S'rval = op(x, newshape)'
tp650
asbsg148
(lp651
g52
asg150
g1
(g151
g3
NtRp652
(dp653
g154
I4
sg155
g156
sg30
Nsbsbsg112
g1
(g113
g3
NtRp654
(dp655
g116
(I00
I00
I00
I00
tp656
sg118
g119
sg120
g122
sg123
I00
sg30
Nsbsbag1
(g7
g3
NtRp657
(dp658
g10
S'auto_515'
p659
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p660
(dp661
bsg30
Nsg31
g1
(g32
g3
NtRp662
(dp663
g35
(lp664
g1
(g7
g3
NtRp665
(dp666
g10
S'auto_514'
p667
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p668
(dp669
g16
(lp670
(g109
I145
g166
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp671
a(g168
I30
g169
S'return HostFromGpu()(self)'
tp672
a(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp673
a(g172
I74
g28
S'broadcastable=x.broadcastable)()])'
tp674
asbsg30
Nsg31
g1
(g32
g3
NtRp675
(dp676
g35
(lp677
g1
(g177
g3
NtRp678
(dp679
g12
Nsg180
g1
(g181
g3
NtRp680
(dp681
g30
Nsg184
(lp682
g186
(g137
(g138
(I0
tS'b'
tRp683
(I1
(I20
tg122
I00
S'\x90\x01\xa3>\x1d\x92\xb2\xbe\xce\xd1\x12>Uf\xb1\xbc\xfb\x19@>\xe2\xb0\xd5>\xca\xfa\xc4\xbd\xe2\x0e\xf7\xbe\x85\x19\x86\xbe\x16\x05\xa6\xbcj\x1f}>K\xfd\xb5\xbe\xcd\x07\x1b>\xc9\xca\x05\xbd\xc5\xda\xa2\xbe\x8af\x07=A\xf6\x90\xbeN\x02u\xbe\x8e\x91\xb5\xbe\xca\x17\x9d>'
tbtRp684
asg189
I00
sg190
I00
sg112
g1
(g191
g3
NtRp685
(dp686
g116
(I00
tp687
sg30
Nsbsg195
Nsbsg30
Nsg10
S'auto_461'
p688
sg13
(itheano.gof.utils
scratchpad
p689
(dp690
g16
(lp691
(g105
I224
g106
S'evaluate_lenet5()'
tp692
a(g18
I89
g19
S'poolsize=(2, 2))'
tp693
a(g21
I28
g22
S'self.b = theano.shared(value=b_values, borrow=T)'
tp694
asbsg203
I01
sg31
Nsg112
g685
sbasg13
(itheano.gof.utils
scratchpad
p695
(dp696
g16
(lp697
(g24
I488
g25
S'node = self.make_node(*inputs, **kwargs)'
tp698
a(g27
I183
g28
S'input = as_tensor_variable(_input)'
tp699
a(g109
I145
g166
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp700
a(g168
I30
g169
S'return HostFromGpu()(self)'
tp701
asbsg148
(lp702
g665
asg150
g1
(g213
g3
NtRp703
(dp704
g155
g156
sbsbsg112
g1
(g113
g3
NtRp705
(dp706
g116
(I00
tp707
sg118
g219
sg120
g122
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p708
(dp709
g16
(lp710
(g105
I224
g106
S'evaluate_lenet5()'
tp711
a(g18
I89
g19
S'poolsize=(2, 2))'
tp712
a(g21
I44
g22
S"self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))"
tp713
a(g44
I335
S'dimshuffle'
p714
S'return op(self)'
tp715
asbsg148
(lp716
g657
asg150
g1
(g404
g3
NtRp717
(dp718
g407
(lp719
sg409
(lp720
I0
asg411
(lp721
I0
aI2
aI3
asg413
(I00
tp722
sg414
I00
sg415
(S'x'
I0
S'x'
S'x'
tp723
sg155
g156
sbsbsg112
g1
(g113
g3
NtRp724
(dp725
g116
(I01
I00
I01
I01
tp726
sg118
g219
sg120
g122
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p727
(dp728
g16
(lp729
(g105
I224
g106
S'evaluate_lenet5()'
tp730
a(g18
I89
g19
S'poolsize=(2, 2))'
tp731
a(g21
I44
g22
S"self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))"
tp732
a(g44
I128
g45
S'return theano.tensor.basic.add(self, other)'
tp733
asbsg148
(lp734
g37
asg150
g1
(ctheano.tensor.elemwise
Elemwise
p735
g3
NtRp736
(dp737
S'__module__'
p738
S'tensor'
p739
sg385
g1
(ctheano.scalar.basic
Add
p740
g3
NtRp741
(dp742
g389
g390
sg155
g156
sg30
S'add'
p743
sbsg30
S'Elemwise{add,no_inplace}'
p744
sg155
g156
sS'destroy_map'
p745
(dp746
sS'nfunc_spec'
p747
(g743
I2
I1
tp748
sS'inplace_pattern'
p749
(dp750
sg253
I00
sS'__doc__'
p751
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p752
sbsbsg112
g1
(g113
g3
NtRp753
(dp754
g116
(I00
I00
I00
I00
tp755
sg118
g219
sg120
g122
sg123
I00
sg30
Nsbsbasg13
(itheano.gof.utils
scratchpad
p756
(dp757
g16
(lp758
(g105
I224
g106
S'evaluate_lenet5()'
tp759
a(g18
I89
g19
S'poolsize=(2, 2))'
tp760
a(g21
I44
g22
S"self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))"
tp761
asbsg148
(lp762
g8
asg150
g1
(g735
g3
NtRp763
(dp764
g738
g739
sg385
g1
(ctheano.scalar.basic
Tanh
p765
g3
NtRp766
(dp767
g389
ctheano.scalar.basic
upgrade_to_float
p768
sg155
g156
sg30
S'tanh'
p769
sbsg30
S'Elemwise{tanh,no_inplace}'
p770
sg155
g156
sg745
(dp771
sg747
(g769
I1
I1
tp772
sg749
(dp773
sg253
I00
sg751
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p774
sbsbsg112
g1
(g113
g3
NtRp775
(dp776
g116
(I00
I00
I00
I00
tp777
sg118
g219
sg120
g122
sg123
I00
sg30
NsbsbsS'b'
g678
sS'params'
p778
(lp779
g178
ag678
asS'W'
g178
sb.